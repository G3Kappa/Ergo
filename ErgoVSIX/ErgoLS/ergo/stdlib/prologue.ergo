:- module(prologue, [
	'¬'/1,
	'∧'/2, '∨'/2, ';'/2,
	'='/2, '≠'/2,
	'->'/2, '*'/1
]).


% OPERATOR DECLARATIONS
:- op(5, xfy, ['::']).
:- op(20, xfy, [';', '∨']).
:- op(20, xfx, ['->']).
:- op(30, fx, ['¬', '\\+']).
:- op(50, xfx, ['=']).
:- op(50, xfx, ['≠', '\\=']).
:- op(1000, xfy,  [':']).
:- op(920, fx, ['*']).

% OPERATOR IMPLEMENTATIONS

If -> Then; _Else :- If, !, Then.
_If -> _Then; Else :- !, Else.
If -> Then :- If, !, Then.

%: Logical disjunction of A and B.
';'(_A, _B) :- _A.
%: Logical disjunction of A and B.
';'(_A, _B) :- _B.

%: Logical complement of A (negation).
%: ⊤ iff A cannot be proven.
'¬'(A) :- not(A), !.
%: Unification of A and B.
'='(A, B) :- unify(A, B).
%: Negation of the unification of A and B.
'≠'(A, B) :- not(unify(A, B)).
%: Used for declarative debugging; "comments out" the following statement.
%: Note: this predicate is automatically inlined, which means that it effectively removes the statement from the goal list.
*_. 
