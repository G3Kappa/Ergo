:- module(func, [
	map/3, reduce/3, filter/3
]).

map([], _, []) :- !.
map([H1|T1], Lambda, [H2|T2]) :-
	call(Lambda, H1, H2),
	map(T1, Lambda, T2).

reduce([], _, _) :- !.
reduce([Result], _, Result) :- !.
reduce([A, B|T], Lambda, Result) :-
	call(Lambda, A, B, PartialA),
	reduce([PartialA|T], Lambda, Result).

filter([], _, []) :- !.
filter([H|T], Lambda, T2) :-
	\+call(Lambda, H),
	filter(T, Lambda, T2), !.
filter([H|T], Lambda, [H|T2]) :-
	filter(T, Lambda, T2).
