:- module(math, [
	':='/2, '=:='/2, '=\\='/2,
	'>'/2, '<'/2, '>='/2, '<='/2,
	range/2, range/1,
	between/3, between/6,
	plus/3,
	fibonacci/2, factorial/2,
	max/3, min/3
]).
:- use_module(meta).

:- op(50, xfx, [':=', is]).
:- op(50, xfx, ['=:=']).
:- op(50, xfx, ['=\\=']).

:- op(60, xfy, ['>']).
:- op(60, xfy, ['>=', '≥']).
:- op(40, xfx, ['<']).
:- op(40, xfx, ['<=', '≤']).

:- op(300, xfx, ['mod']).
:- op(700, xfy, ['^']).
:- op(600, xfx, ['*']).
:- op(600, xfx, ['/']).
:- op(600, xfx, ['//']).
:- op(500, xfx, ['+']).
:- op(500, xfx, ['-']).
:- op(500, xfy, ['>>']).
:- op(500, xfy, ['<<']).
:- op(5, fx, ['+']).
:- op(5, fx, ['-']).

:- expand([O] >> ('π' :- O = 3.14159265359)).
:- expand([O] >> ('τ' :- O = 6.28318530717)).

:- table(fibonacci/2).

% OPERATORS

%: Assignment of A to the arithmetic evaluation of B.
':='(A, B) :- is(A, B).
%: Equivalence of the arithmetic evaluations of A and B.
'=:='(A, B) :- eval(A) == eval(B).
%: Inequivalence of the arithmetic evaluations of A and B.
'=\\='(A, B) :- eval(A) \== eval(B).
%: Arithmetic comparison (gt).
'>'(A, B)  :- eval(A > B).
%: Arithmetic comparison (lt).
'<'(A, B)  :- eval(A < B).
%: Arithmetic comparison (gte).
'>='(A, B) :- eval(A >= B).
%: Arithmetic comparison (lte).
'<='(A, B) :- eval(A <= B).

% HELPERS

between_(Min, Max, _, M) :- Min <= Max, M is Min.
between_(Min, Max, Step, M) :-
	Min <= Max,
	NewMin := Min + Step,
	between_(NewMin, Max, Step, M).

between('[', Min, Max, ']', Step, M) :- between_(Min, Max, Step, M).
between('(', Min, Max, ']', Step, M) :- NewMin := Min + Step, between_(NewMin, Max, Step, M).
between('[', Min, Max, ')', Step, M) :- NewMax := Max - Step, between_(Min, NewMax, Step, M).
between('(', Min, Max, ')', Step, M) :- NewMin := Min + Step, NewMax := Max - Step, between_(NewMin, NewMax, Step, M).

between(Min, Max, M) :- between('(', Min, Max, ']', 1, M).

% EXPORTED

range(Min < X < Max, Step)   :- ground(Step), between('(', Min, Max, ')', Step, X).
range(Min <= X < Max, Step)  :- ground(Step), between('[', Min, Max, ')', Step, X).
range(Min < X <= Max, Step)  :- ground(Step), between('(', Min, Max, ']', Step, X).
range(Min <= X <= Max, Step) :- ground(Step), between('[', Min, Max, ']', Step, X).
range(R) :- range(R, 1).

plus(A, B, C) :- ground(A), ground(B), \+ground(C), C := A + B.
plus(A, B, C) :- ground(A), \+ground(B), ground(C), B := C - A.
plus(A, B, C) :- \+ground(A), ground(B), ground(C), A := C - B. 

fibonacci(0, 0).
fibonacci(1, 1).
fibonacci(N, F) :-
        N > 1,
        N1 is N - 1,
        N2 is N - 2,
        fibonacci(N1, F1),
        fibonacci(N2, F2),
        F is F1 + F2.

factorial(N, R) :- factorial(N, 1, R).
factorial(0, R, R) :- !.
factorial(N, Acc, R) :-
    NewN is N - 1,
    NewAcc is Acc * N,
    factorial(NewN, NewAcc, R).


max(A, B, Max) :- A > B -> Max = A ; Max = B.
min(A, B, Min) :- A < B -> Min = A ; Min = B.