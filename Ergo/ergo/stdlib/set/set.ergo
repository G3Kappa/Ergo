:- module(set, [
    intersection/3, difference/3
]).

:- op(500, xfx, ['&']).

intersection(A, B, Intersection) :-
    difference(A, B, Diff),
    difference(A, Diff, Intersection).

difference(A, B, Difference) :-
    union(Difference, B, A).
    
{C = A + B} :- \+ground(C), is_set(A), is_set(B), union(A, B, C).
{C = A + B} :- \+ground(B), is_set(A), is_set(C), union(A, B, C).
{C = A + B} :- \+ground(A), is_set(B), is_set(C), union(A, B, C).
{C = A - B} :- \+ground(C), is_set(A), is_set(B), difference(A, B, C).
{C = A - B} :- \+ground(B), is_set(A), is_set(C), difference(A, B, C).
{C = A - B} :- \+ground(A), is_set(B), is_set(C), difference(A, B, C).
{C = A & B} :- \+ground(C), is_set(A), is_set(B), intersection(A, B, C).
{C = A & B} :- \+ground(B), is_set(A), is_set(C), intersection(A, B, C).
{C = A & B} :- \+ground(A), is_set(B), is_set(C), intersection(A, B, C).
