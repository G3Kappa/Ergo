:- module(dict, [
	'='/2
]).

:- op(900, yfx, ['.']).
:- op(890, fy, ['&']).
:- op(850, xfy, [with]).
:- op(850, xfy, [without]).
%: Directly dereferences and evaluates a dictionary property
:- expand([Val] >> (
	% dict_deref_ needs to be qualified since it isn't exported. The macro will run in the context of another module!
	'&'(D.Key) :- dict:dict_deref_(D, Key, Val)
)).
%: Creates a new dictionary and adds or replaces the specified keys
:- expand([Val] >> (
	'with'(A, B) :- with(A, B, Val)
)).
%: Creates a new dictionary and removes the specified keys
:- expand([Val] >> (
	'without'(A, B) :- 
		list_set(BList, B),
		map([X, Y]>>(Y = X:_), BList, BListMap),
		list_set(BListMap, B_),
		with(Val, B_, A)
)).

dict_deref_(D, Key, Val) :-
	nonvar(D), 
	term_type(Key, atom),
	% Recursively expands itself to handle nested dictionaries!
	dict(Tag, Args) = D, 
	dict_key_value(dict(Tag, Args), Key, Val),
	% Prevent further unification
	!.
%: Dereferences D.Key and unifies the result with Val
Val = D.Key :- dict_deref_(D, Key, Val), !.

dict_merge(dict(T1, A1), dict(_, A2), dict(T1, A3)) :-
	union(A1, A2, A3).
	