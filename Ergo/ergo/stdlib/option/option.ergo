:- module(option, [
    named_arg/3,
    named_tuple/3,
    coalesce/3
]).

%: Depends on operators defined in this module.
:- use_module(dict).

:- op(700, xfy, ['??']).
:- expand([O] >> (A ?? B :- coalesce(A, B, O))).

named_arg(Name:Arg, Name, Arg) :- ground(Name).

named_tuple(Complex, Name, Tuple) :- ground(Tuple), comma_list(Tuple, Args), term(Name, Args, Complex).
named_tuple(Complex, Name, Tuple) :- \+ground(Tuple), term(Name, Args, Complex), comma_list(Tuple, Args).

coalesce(A, _, A) :- ground(A), !.
coalesce(_, B, B).