:- module(reflection, [
	'@<'/2, '@>'/2, '@≥'/2, '@≤'/2,
	'?='/2, '/'/2, '=..'/2,

	functor/3, arg/3
]).

:- op(51, xfy, ['@>']).
:- op(51, xfy, ['@≥', '@>=']).
:- op(49, yfx, ['@<']).
:- op(49, yfx, ['@≤', '@<=']).
:- op(50, xfx, ['?=']).
:- op(50, xfx, ['=..']).


%: Term expansion.
'=..'(Term, [Functor|Args]) :- term(Functor, Args, Term).
%: Term comparison (gt).
'@>'(A, B)  :- compare(X, A, B), X  > 0.
%: Term comparison (lt).
'@<'(A, B)  :- compare(X, A, B), X  < 0.
%: Term comparison (gte).
'@≥'(A, B) :- compare(X, A, B), X >= 0.
%: Term comparison (lte).
'@≤'(A, B) :- compare(X, A, B), X <= 0.
%: Synctactic equality of A and B.
%: ⊤ iff the result of A == B will not change due to further instantiation of either term.
'?='(A,B) :- \+unifiable(A,B,[_H|_T]).
%: Anonymous type declaration. (TODO: remove?)
'/'(Functor, Arity) :- anon(Functor, Arity).

%: True when Term is a term with functor Name/Arity.
functor(Term, Name, Arity) :-
	Term =.. [Name|Args],
	length(Args, Arity).

%: True when Term is a term with functor Name/Arity.
arg(Arg, Term, Value) :-
	Term =.. [_|Args],
	nth1(Arg, Args, Value).
