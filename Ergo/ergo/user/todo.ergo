:- module(todo, [
	todo/2, todo/3
]).

:- dynamic(todo_/3).
:- dynamic(tag/1).

todo_create(Name, Desc, Tags) :-
	todo_(Name, _, _) 
	-> (write(('TODO ', Name, ' already exists.')), nl, false)
	; (
		forall(member(T, Tags), (tag(T) ; (write(('Tag ', T, ' does not exist.')), nl, false))),
		assertz(todo_(Name, Desc, Tags))
	).

todo_destroy(Name) :-
	todo_(Name, _, _) 
	-> retract(todo_(Name, _, _))
	; (write(('TODO ', Name, ' does not exist.')), nl, false).

todo(Name, Desc, Tags) :- todo_(Name, Desc, Tags).

init :-
	assertz(tag(t1)),
	assertz(tag(t2)),
	todo_create(1, first, [t1]),
	todo_create(2, second, [t1, t2]).

% This is a single-line comment.
%: This is a documentation comment.
% This is another single-line comment that isn't part of the documentation.
%: TODO: List of work to be done.
todo('Shell', X) :- member(X, []).
todo('Shell Commands', X) :- member(X, ['Print operators']).
todo('Global', X) :- member(X, ['Constraints/Attributed vars', 'Coroutining', 'Foreach/Forall', 'Try/Catch', 'Regex', 'Basic typesystem', 'Proper strings']).
todo('C#', X) :- member(X, ['Generators', 'CLR Attributes']).
todo('Interpreter', X) :- member(X, ['Virtualized stack', 'Recursion optimization', 'Lambdas']).
todo('Directives', X) :- member(X, []).
todo('Modules', X) :- member(X, []).
todo('Parser', X) :- member(X, []).
todo('Lexer', X) :- member(X, ['Fix quoting']).
todo('AST', X) :- member(X, ['Annotations', '{ Objects }', 'IL Codegen']).
todo('Tests', X) :- member(X, ['Modules', 'Sugaring/desugaring', 'Operator and literal resolution']).