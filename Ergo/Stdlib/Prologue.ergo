:- module(prologue, [
	'\\+'/1,
	'is'/2,
	'=:='/2, '=\\='/2,
	'='/2, '\\='/2,
	'>'/2, '<'/2, '>='/2, '<='/2,
	'=='/2, '\\=='/2,
	'#<'/2, '#>'/2, '#<='/2, '#>='/2,
	':='/2, '?='/2,
	';'/2,
	'/'/2,
	':'/2,
	'⊤'/0, '⊥'/0
]).

% OPERATOR DECLARATIONS
:- op(30, xfy, [';', '∨']).
:- op(50, xfx, ['is']).
:- op(50, xfx, ['=:=']).
:- op(50, xfx, ['=\\=']).
:- op(50, xfx, [':=']).
:- op(50, xfx, ['==']).
:- op(50, xfx, ['\\==']).
:- op(51, xfy, ['#>']).
:- op(51, xfy, ['#>=']).
:- op(49, yfx, ['#<']).
:- op(49, yfx, ['#<=']).
:- op(50, xfx, ['\\=']).
:- op(50, xfx, ['?=']).
:- op(1000, xfx, [':']).
:- op(30, fx, ['\\+', '¬']).

% OPERATOR IMPLEMENTATIONS
'\\+'(A) :- @unprovable(A), @cut.
'is'(A, B) :- @eval(A, B).
'=:='(A, B) :- @eval(A) == @eval(B).
'=\\='(A, B) :- @eval(A) \== @eval(B).
'='(A, B) :- @unify(A, B).
'\\='(A, B) :- \+(A = B).
'>'(A, B)  :- @evalcmp(A > B).
'<'(A, B)  :- @evalcmp(A < B).
'>='(A, B) :- @evalcmp(A >= B).
'<='(A, B) :- @evalcmp(A <= B).
'=='(A, B) :- @compare(0, A, B).
'\\=='(A, B) :- @not(@compare(0, A, B)).
'#<'(A, B)  :- @compare(X, A, B), X  < 0.
'#<='(A, B) :- @compare(X, A, B), X <= 0.
'#>'(A, B)  :- @compare(X, A, B), X  > 0.
'#>='(A, B) :- @compare(X, A, B), X >= 0.
':='(A, B) :- @set(A, B).
'?='(A,B) :- \+@unifiable(A,B,[_|_]).
';'(A, _) :- A.
';'(_, B) :- B.
'/'(A, B) :- @anon(A, B).

'⊤' :- true.
'⊥' :- false.
